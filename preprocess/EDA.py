# -*- coding: utf-8 -*-
"""EDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dvX3PdnR8bU0OTJCJGcPjSyAwGw5xh8s
"""

# # 한글 폰트
# !sudo apt-get install -y fonts-nanum
# !sudo fc-cache -fv
# !rm ~/.cache/matplotlib -rf

# Commented out IPython magic to ensure Python compatibility.
import os
import pandas as pd
import numpy as np
import random
import seaborn as sns

import warnings
warnings.filterwarnings('ignore')

import matplotlib.pyplot as plt
plt.rc('font', family='NanumBarunGothic') 
# %matplotlib inline

np.random.seed(777)

loan_result=pd.read_csv('/content/drive/MyDrive/Hype Money/raw/loan_result.csv')
log_data=pd.read_csv('/content/drive/MyDrive/Hype Money/raw/log_data.csv')
user_spec=pd.read_csv('/content/drive/MyDrive/Hype Money/raw/user_spec.csv')

# 출생년도 -> 연령대
cut = [0, 1933, 1943, 1953, 1963, 1973, 1983, 1993, 2003, 2013, 2022]
user_spec['ages'] = pd.cut(x=user_spec['birth_year'], bins=cut, labels=[90, 80,70,60,50,40,30,20,10,0])
# 대출 목적 영문표기 -> 한글표기
mapping = {"LIVING" : "생활비", "SWITCHLOAN" : "대환대출", "INVEST" : "투자", "ETC" : "기타", "BUSINESS" : "사업자금", "BUYCAR" : "자동차구입", "HOUSEDEPOSIT" : "전월세보증금", "BUYHOUSE" : "주택구입"}   # 봄 = 0
user_spec['purpose'] = user_spec['purpose'].replace(mapping)

user_spec_type=list(user_spec.groupby(['employment_type','income_type'])['credit_score'].count())
user_spec_type=[user_spec_type[:6],user_spec_type[6:12],user_spec_type[12:18],user_spec_type[18:24]]
labels=['EARNEDINCOME','EARNEDINCOME2','FREELANCER','OTHERINCOME','PRACTITIONER','PRIVATEBUSINESS']
title=['계약직','기타','일용직','정규직']

colors = ['lightskyblue', 'lightcoral','orange','lightgreen','purple','gray']
plt.figure(figsize=(15,10))

for i in range(4):
    ax=plt.subplot(2,2,i+1)
    plt.pie(user_spec_type[i], labels=labels, counterclock=False, autopct='%1.0f%%', colors=colors)
    plt.legend(['EARNEDINCOME','EARNEDINCOME2','FREELANCER','OTHERINCOME','PRACTITIONER','PRIVATEBUSINESS'])
    plt.title(title[i])
plt.tight_layout()
plt.show()

wish_result_all = pd.merge(loan_result[loan_result['is_applied']==1][['application_id','loan_limit']], user_spec[['application_id', 'desired_amount']], how='left')
plt.figure(figsize=(7,7))
bar_width = 0.9
alpha = 0.5
p1 = plt.bar('loan_limit', 
             wish_result_all['loan_limit'].mean(),
             bar_width,
             color='b',
             alpha=alpha)
p2 = plt.bar('desired_amount', 
             wish_result_all['desired_amount'].mean(),
             bar_width,
             color='r',
             alpha=alpha)
plt.ylabel('금액', fontsize=12)
plt.xlabel('전체', fontsize=12)
plt.legend((p1[0], p2[0]), ('대출 한도', '희망 금액'), fontsize=12)
plt.title('(전체) 희망 대출 금액 vs 실제 대출 금액', fontsize=15)
plt.show()

wish_result_gen = pd.merge(loan_result[loan_result['is_applied']==1][['application_id','loan_limit']], user_spec[['application_id', 'gender', 'desired_amount']], how='left')
wish_result_gen = wish_result_gen.groupby('gender')[['loan_limit', 'desired_amount']].mean()

plt.figure(figsize=(7,7))
bar_width = 0.35
alpha = 0.5
p1 = plt.bar(wish_result_gen.index, 
             wish_result_gen['loan_limit'],
             bar_width,
             color='b',
             alpha=alpha)
p2 = plt.bar(wish_result_gen.index + bar_width, 
             wish_result_gen['desired_amount'],
             bar_width,
             color='r',
             alpha=alpha)
plt.ylabel('금액', fontsize=18)
plt.xlabel('성별', fontsize=18)
plt.xticks(wish_result_gen.index + bar_width/2, ['여성','남성'], fontsize=15)
plt.legend((p1[0], p2[0]), ('대출 한도', '희망 금액'), fontsize=15)
plt.title('(성별) 희망 대출 금액 vs 실제 대출 금액', fontsize=15)
plt.show()

wish_result_age = pd.merge(loan_result[loan_result['is_applied']==1][['application_id','loan_limit']], user_spec[['application_id', 'ages', 'desired_amount']], how='left')
wish_result_age = wish_result_age.groupby('ages')[['loan_limit', 'desired_amount']].mean()
wish_result_age.drop([0, 10], axis=0, inplace=True)

plt.figure(figsize=(20,7))
bar_width = 4
alpha = 0.5
p1 = plt.bar(wish_result_age.index, 
             wish_result_age['loan_limit'],
             bar_width,
             color='b',
             alpha=alpha)
p2 = plt.bar([94, 84, 74, 64, 54, 44, 34, 24], 
             wish_result_age['desired_amount'],
             bar_width,
             color='r',
             alpha=alpha)
plt.ylabel('금액', fontsize=18)
plt.xlabel('연령대', fontsize=18)
plt.xticks([92, 82, 72, 62, 52, 42, 32, 22], ['90대','80대','70대','60대','50대','40대','30대','20대'], fontsize=15)
plt.legend((p1[0], p2[0]), ('대출 한도', '희망 금액'), fontsize=15)
plt.title('(연령대별) 희망 대출 금액 vs 실제 대출 금액', fontsize=20)
plt.show()

wish_result_pur = pd.merge(loan_result[loan_result['is_applied']==1][['application_id','loan_limit']], user_spec[['application_id', 'purpose', 'desired_amount']], how='left')
wish_result_pur = wish_result_pur.groupby('purpose')[['loan_limit', 'desired_amount']].mean()

plt.figure(figsize=(20,7))
bar_width = 0.35
alpha = 0.5
p1 = plt.bar([i for i in range(0, 8)], 
             wish_result_pur['loan_limit'],
             bar_width,
             color='b',
             alpha=alpha)
p2 = plt.bar([i+bar_width for i in range(0, 8)], 
             wish_result_pur['desired_amount'],
             bar_width,
             color='r',
             alpha=alpha)
plt.ylabel('금액', fontsize=18)
plt.xlabel('연령대', fontsize=18)
plt.xticks([i+bar_width/2 for i in range(0, 8)], wish_result_pur.index, fontsize=15)
plt.legend((p1[0], p2[0]), ('대출 한도', '희망 금액'), fontsize=15)
plt.title('(대출 목적별) 희망 대출 금액 vs 실제 대출 금액', fontsize=20)
plt.show()

loan_result['timestamp'] = pd.to_datetime(loan_result['loanapply_insert_time'],format='%Y-%m-%d %H:%M:%S')
loan_result['hour'] = loan_result['timestamp'].dt.hour
loan_result['month'] = loan_result['timestamp'].dt.month
loan_result['date'] = loan_result['timestamp'].dt.date
loan_result['day'] = loan_result['timestamp'].dt.day
loan_result['weekday'] = loan_result['timestamp'].dt.weekday

log_data['timestamp'] = pd.to_datetime(log_data['timestamp'],format='%Y-%m-%d %H:%M:%S')
log_data['hour'] = log_data['timestamp'].dt.hour
log_data['month'] = log_data['timestamp'].dt.month
log_data['date'] = log_data['timestamp'].dt.date
log_data['day'] = log_data['timestamp'].dt.day
log_data['weekday'] = log_data['timestamp'].dt.weekday

lr_hour = loan_result[['application_id','hour']].drop_duplicates().reset_index(drop=True)
plt.figure(figsize=(15,7))
sns.countplot(x='hour', data=lr_hour);
plt.title('시간대별 대출 신청 현황',fontsize=15)

log_sla = log_data[log_data['event']=='StartLoanApply']
plt.figure(figsize=(15,7))
sns.countplot(x='hour', data=log_sla);
plt.title('시간대별 한도 조회 현황',fontsize=15)

colors = ['lightskyblue', 'lightcoral']
plt.figure(figsize=(10,5))
plt.pie([len(loan_result[loan_result['is_applied']==0]),len(loan_result[loan_result['is_applied']==1])], labels=['신청X','신청O'], counterclock=False, autopct='%1.0f%%', colors=colors)
plt.legend(['신청X','신청O'])
plt.tight_layout()
plt.title('is_applied 개수 비교')
plt.show()