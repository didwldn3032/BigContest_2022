# -*- coding: utf-8 -*-
"""preprocess.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RmyLQghoYG0SSkNeZNFj7DKyNt6HmzH4
"""

import os
import pandas as pd
import numpy as np
import random

np.random.seed(777)

if __name__ == "__main__":
  loan_result=pd.read_csv('/content/drive/MyDrive/Hype Money/raw/loan_result.csv')
  log_data=pd.read_csv('/content/drive/MyDrive/Hype Money/raw/log_data.csv')
  user_spec=pd.read_csv('/content/drive/MyDrive/Hype Money/raw/user_spec.csv')


  # 영어-한글 대체
  mapping = {"LIVING" : "생활비", "SWITCHLOAN" : "대환대출", "INVEST" : "투자", "ETC" : "기타", "BUSINESS" : "사업자금", "BUYCAR" : "자동차구입", "HOUSEDEPOSIT" : "전월세보증금", "BUYHOUSE" : "주택구입"}   # 봄 = 0
  user_spec['purpose'] = user_spec['purpose'].replace(mapping)

  #연령대 생성
  user_spec['age']=(2022-user_spec['birth_year'])//10*10

  #기대출수 제거
  user_spec.drop(['existing_loan_cnt'], axis=1, inplace=True)

  #이상치
  #1. yearly_income,desired_amount, existing_loan_amt 0 대체
  def desired_amount_impute(data):
    if data==0:
      return 500000.0
    else:
      return data

  user_spec['desired_amount'] = user_spec['desired_amount'].apply(desired_amount_impute)
  user_spec['existing_loan_amt'] = user_spec['existing_loan_amt'].apply(desired_amount_impute)
  user_spec['yearly_income'] = user_spec['yearly_income'].apply(desired_amount_impute)


  #2. yearly_income, desired_amount, existing_loan_amt 범주별로 비율 선택해서 최댓값 대체
  income_type=['PRIVATEBUSINESS', 'FREELANCER', 'EARNEDINCOME', 'OTHERINCOME',
        'EARNEDINCOME2', 'PRACTITIONER']
  yearly_income_max=[0.95,0.995,0.996,0.996,0.996,0.94]
  desired_amount_max=[0.985,0.993,0.989,0.993,0.995,0.94]
  existing_loan_amt_max=user_spec[user_spec['existing_loan_amt'].notnull()]['existing_loan_amt'].quantile(q=0.99, interpolation='nearest')

  for i in range(len(income_type)):
      max=user_spec[user_spec['yearly_income'].notnull()]['yearly_income'].quantile(q=yearly_income_max[i], interpolation='nearest')
      user_spec['yearly_income']=user_spec.apply(lambda x:max
                                if (x["yearly_income"]>max) & (x['income_type']==income_type[i]) else x["yearly_income"],axis=1 )
      
  for i in range(len(income_type)):
      max=user_spec[user_spec['desired_amount'].notnull()]['desired_amount'].quantile(q=desired_amount_max[i], interpolation='nearest')
      user_spec['desired_amount']=user_spec.apply(lambda x:max
                                if (x["desired_amount"]>max) & (x['income_type']==income_type[i]) else x["desired_amount"],axis=1 )
      
  for i in range(len(income_type)):
      user_spec['existing_loan_amt']=user_spec.apply(lambda x:existing_loan_amt_max
                                if (x["existing_loan_amt"]>existing_loan_amt_max) & (x['income_type']==income_type[i]) else x["existing_loan_amt"],axis=1 )
      
  #3. birth_year>=year인 경우 제거

  def make_year(month): #연차 column 생성
    try:
      if len(str(int(month)))==8:
          return int(month//10000)
      else:
          return int(month//100)
    except:
      return np.NaN

  user_spec['year'] = user_spec['company_enter_month'].apply(make_year)

  def check(data):
      if data['birth_year']>=data['year']:
          if data['insert_time'][:7]=='2022-06':
              return np.NaN #np.NaN
          else:
              return -1 #drop
      else:
          return data['year']

  user_spec['year2'] = user_spec.apply(check,axis=1)

  drop_index=user_spec[user_spec['year2']==-1].index
  user_spec.drop(drop_index,inplace=True)
  user_spec.drop(['year2'],axis=1,inplace=True)

  user_spec.to_csv('outlier_fin.csv')

