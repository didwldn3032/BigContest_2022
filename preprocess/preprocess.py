# -*- coding: utf-8 -*-
"""preprocess.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A1a7Y2dT9uUXxwczEte3J3Eae43hZ1PU
"""

import os
import pandas as pd
import numpy as np
from tqdm import tqdm

import random
from datetime import datetime, timedelta
import datetime
import time
import ast
from collections import Counter
import math

from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.metrics import accuracy_score, mean_squared_error
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

import warnings
warnings.filterwarnings('ignore')

np.random.seed(777)

if __name__ == "__main__":
  loan_result=pd.read_csv('/content/drive/MyDrive/Hype Money/raw/loan_result.csv')
  log_data=pd.read_csv('/content/drive/MyDrive/Hype Money/raw/log_data.csv')
  user_spec=pd.read_csv('/content/drive/MyDrive/Hype Money/preprocess/outlier_fin.csv')

  lr_usr = loan_result[(loan_result['loan_limit'].notna())&(loan_result['loan_rate'].notna())][['application_id']].drop_duplicates()
  user_spec_fin = pd.merge(lr_usr, user_spec, how='inner').drop(['Unnamed: 0', 'age', 'year'], axis=1)

  
  # company_enter_month (-> 근무일수)
  user_spec_fin_tmp = user_spec_fin[user_spec_fin['company_enter_month'].notna()]
  user_spec_fin_na = user_spec_fin[user_spec_fin['company_enter_month'].isnull()]
  user_spec_fin_tmp['company_enter_month'] = user_spec_fin_tmp['company_enter_month'].astype('str')
  user_spec_fin_tmp['company_enter_month'] = [datetime.datetime(int(now_date[:4]), int(now_date[4:6]), 1) for now_date in user_spec_fin_tmp['company_enter_month']]
  user_spec_fin = pd.concat([user_spec_fin_tmp, user_spec_fin_na])

  # birth_year (-> 연령)
  user_spec_fin['age'] = 2022 - user_spec_fin['birth_year'] + 1
  # insert_time
  user_spec['insert_time'] = pd.to_datetime(user_spec['insert_time'],format='%Y-%m-%d %H:%M:%S')

  #yearly_income user_id 기반 단순대체
  fill_320829 = user_spec_fin.loc[320829].tolist()
  fill_320829[6] = 500000.0
  user_spec_fin.loc[320829] = fill_320829
  user_spec_fin[user_spec_fin['user_id']==670502]

  #개인회생 관련 재범주화
  personal_index=user_spec_fin[(user_spec_fin['personal_rehabilitation_yn']==0) & (user_spec_fin['personal_rehabilitation_complete_yn']==1)].index
  user_spec_fin.drop(personal_index, inplace=True)
  for i in tqdm(user_spec_fin.index):
    if (user_spec_fin['personal_rehabilitation_yn'][i]==0) and (pd.isna(user_spec_fin['personal_rehabilitation_complete_yn'][i])):
      user_spec_fin['personal_rehabilitation_complete_yn'][i] = 0

  user_spec_fin.drop(['birth_year'], axis=1, inplace=True)
  user_spec_fin['yearly_income'] = user_spec_fin['yearly_income'].astype('int')
  user_spec_fin['desired_amount'] = user_spec_fin['desired_amount'].astype('int')

  #라벨 인코딩
  usf_ctg = ['income_type', 'employment_type', 'houseown_type', 'purpose']
  for i in usf_ctg:
    le = LabelEncoder()
    le.fit(user_spec_fin[i].tolist())
    user_spec_fin[i] = le.transform(user_spec_fin[i].tolist())


  from pycaret.regression import * 
  #pycaret_age
  # 현재 칼럼의 예측에 활용할 변수 선택
  not_use_cols = ['application_id', 'user_id', 'insert_time', 'credit_score', 'company_enter_month', 'personal_rehabilitation_yn', 'personal_rehabilitation_complete_yn', 'existing_loan_amt']
  use_cols = ['income_type', 'employment_type', 'houseown_type', 'purpose', 'gender','yearly_income','desired_amount','age']
  use_cate_cols = ['income_type', 'employment_type', 'houseown_type', 'purpose']
  use_num_cols = ['yearly_income','desired_amount']

  # 예측용 데이터 생성
  usf_gb_train = user_spec_fin[user_spec_fin['gender'].notna()][use_cols]
  usf_gb_train['gender'], usf_gb_train['age'] = usf_gb_train['gender'].astype('int'), usf_gb_train['age'].astype('int') # 전체에다가 하면 결측값때문에 오류남

  gen_df = usf_gb_train.drop(['gender'],axis=1)

  clf = setup(data=gen_df, 
              target='age',
              categorical_features=use_cate_cols,
              numeric_features=use_num_cols,
              normalize=True,
              normalize_method='zscore',
              iterative_imputation_iters=10,
              polynomial_features=True,
              session_id=42, 
              silent=True,
              )
  
  top5 = compare_models(sort='MSE', n_select=5,  budget_time = 3,errors="raise")
  tuned_top5 = [tune_model(i) for i in top5]
  blender_top5 = blend_models(estimator_list=tuned_top5)
  
  usf_gb_test = user_spec_fin[user_spec_fin['age'].isnull()][use_cols]
  usf_gb_test=usf_gb_test.drop(['age'], axis=1)

  final_model = finalize_model(blender_top5)
  prediction = predict_model(final_model, data=usf_gb_test)

  usf_gb_test_sv = user_spec_fin[user_spec_fin['age'].isnull()][not_use_cols]

  prediction.rename(columns = {'Label':'age'},inplace=True)
  usf_gb_test_sv = user_spec_fin[user_spec_fin['age'].isnull()][not_use_cols]
  usf_gb_test_fin = pd.concat([prediction, usf_gb_test_sv], axis=1)



  #random_forest_gender
  # 예측용 데이터 생성
  gen_df_x, gen_df_y = usf_gb_train.drop(['gender', 'age'], axis=1), usf_gb_train[['gender']]
  gen_train_x, gen_test_x, gen_train_y, gen_test_y = train_test_split(gen_df_x, gen_df_y, test_size = 0.2, random_state = 42)

  # 모델 훈련 및 성능 확인
  gen_clf = RandomForestClassifier(n_estimators=20, max_depth=5, random_state=0)
  gen_clf.fit(gen_train_x, gen_train_y)
  g_pred = gen_clf.predict(gen_test_x)
  print("gender Prediction score - Random Forest : %s"%accuracy_score(gen_test_y, g_pred))

  usf_gb_test = user_spec_fin[user_spec_fin['gender'].isnull()][use_cols]
  usf_gb_test_sv = user_spec_fin[user_spec_fin['gender'].isnull()][not_use_cols]
  gb_test_x = usf_gb_test.drop(['gender', 'age'], axis=1)
  g_null_pred = gen_clf.predict(gb_test_x)
  usf_gb_test_fin['gender'] = g_null_pred

  # 결측행 + 비결측행 = 원본 데이터
  user_spec_fin_1 = pd.concat([user_spec_fin[user_spec_fin['gender'].notna()], usf_gb_test_fin]).sample(frac=1).reset_index(drop=True)



  #pycaret_credit_score
  # 현재 칼럼의 예측에 활용할 변수 선택
  not_use_cols_2 = ['application_id', 'user_id', 'insert_time', 'company_enter_month',
                    'personal_rehabilitation_yn', 'personal_rehabilitation_complete_yn', 'existing_loan_amt']
  use_cols_2 = ['yearly_income', 'income_type', 'employment_type', 'houseown_type',
                'desired_amount', 'purpose', 'gender', 'age', 'credit_score']
  use_cate_cols_2 = ['income_type', 'employment_type', 'houseown_type', 'purpose','gender']
  use_num_cols_2 = ['yearly_income','desired_amount','age']

  # 예측용 데이터 생성
  usf_cre_train = user_spec_fin_1[user_spec_fin_1['credit_score'].notna()][use_cols_2]
  usf_cre_train['credit_score']= usf_cre_train['credit_score'].astype('int')

  cre_df = usf_cre_train.copy()

  clf = setup(data=cre_df,
              target='credit_score',
              categorical_features=use_cate_cols_2,
              numeric_features=use_num_cols_2,
              normalize=True,
              normalize_method='zscore',
              iterative_imputation_iters=10,
              polynomial_features=True,
              session_id=42, 
              silent=True,
              ) 
  
  top5 = compare_models(sort='MSE', n_select=5,  budget_time = 3,errors="raise")
  tuned_top5 = [tune_model(i) for i in top5]
  blender_top5 = blend_models(estimator_list=tuned_top5)
  
  usf_cre_test = user_spec_fin_1[user_spec_fin_1['credit_score'].isnull()][use_cols_2]
  usf_cre_test=usf_cre_test.drop(['credit_score'], axis=1)

  final_model = finalize_model(blender_top5)
  prediction = predict_model(final_model, data=usf_cre_test)
  prediction.rename(columns = {'Label':'credit_score'},inplace=True)

  usf_cre_test_sv = user_spec_fin_1[user_spec_fin_1['credit_score'].isnull()][not_use_cols_2]
  usf_cre_test_fin = pd.concat([prediction, usf_cre_test_sv], axis=1)

  # 결측행 + 비결측행 = 원본 데이터
  user_spec_fin_2 = pd.concat([user_spec_fin_1[user_spec_fin_1['credit_score'].notna()], usf_cre_test_fin]).sample(frac=1).reset_index(drop=True)



  #pycaret_company_enter_month
  # 재직연차 변수 계산
  user_spec_fin_2['insert_time'] = pd.to_datetime(user_spec_fin_2['insert_time'],format='%Y-%m-%d %H:%M:%S')
  user_spec_fin_2['company_enter_month'] = pd.to_datetime(user_spec_fin_2['company_enter_month'],format='%Y-%m-%d %H:%M:%S')
  user_spec_fin_2['working_years'] = (user_spec_fin_2['insert_time'] - user_spec_fin_2['company_enter_month']).astype('timedelta64[Y]').astype('float')
  user_spec_fin_2.drop(['insert_time', 'company_enter_month'], axis=1, inplace=True)

  # 현재 칼럼의 예측에 활용할 변수 선택
  not_use_cols_3 = ['application_id', 'user_id', 'personal_rehabilitation_yn',
                    'personal_rehabilitation_complete_yn', 'existing_loan_amt']
  use_cols_3 = ['yearly_income', 'income_type', 'employment_type', 'houseown_type', 
                'desired_amount', 'purpose', 'gender', 'age', 'credit_score', 'working_years']
  use_cate_cols_3 = ['income_type', 'employment_type', 'houseown_type', 'purpose','gender']
  use_num_cols_3 = ['yearly_income','desired_amount','age','credit_score']

  # 예측용 데이터 생성
  usf_work_train = user_spec_fin_2[user_spec_fin_2['working_years'].notna()][use_cols_3]
  usf_work_train['working_years']= usf_work_train['working_years'].astype('int')

  work_df = usf_work_train.copy()

  clf = setup(data=work_df,
              target='working_years',
              categorical_features=use_cate_cols_3,
              numeric_features=use_num_cols_3,     
              normalize=True, 
              normalize_method='zscore',
              iterative_imputation_iters=10, 
              polynomial_features=True,
              session_id=42, 
              silent=True,
              ) 
  
  top5 = compare_models(sort='MSE', n_select=1,  budget_time = 3,errors="raise")

  usf_work_test = user_spec_fin_2[user_spec_fin_2['working_years'].isnull()][use_cols_3]
  usf_work_test=usf_work_test.drop(['working_years'], axis=1)

  final_model = finalize_model(top5)
  prediction = predict_model(final_model, data=usf_work_test)
  prediction.rename(columns = {'Label':'working_years'},inplace=True)

  usf_work_test_sv = user_spec_fin_2[user_spec_fin_2['working_years'].isnull()][not_use_cols_3]
  usf_work_test_fin = pd.concat([prediction, usf_work_test_sv], axis=1)

  # 결측행 + 비결측행 = 원본 데이터
  user_spec_fin_3 = pd.concat([user_spec_fin_2[user_spec_fin_2['working_years'].notna()], usf_work_test_fin]).sample(frac=1).reset_index(drop=True)



  #pycaret_existing_loan_amt
  # 현재 칼럼의 예측에 활용할 변수 선택
  not_use_cols_4 = ['application_id', 'user_id', 'personal_rehabilitation_yn',
                    'personal_rehabilitation_complete_yn']
  use_cols_4 = ['yearly_income', 'income_type', 'employment_type', 'houseown_type', 
                'desired_amount', 'purpose', 'gender', 'age', 'credit_score', 'working_years', 'existing_loan_amt']
  use_cate_cols_4 = ['income_type', 'employment_type', 'houseown_type', 'purpose','gender']
  use_num_cols_4 = ['yearly_income','desired_amount','age','credit_score', 'working_years']

  # 예측용 데이터 생성
  usf_loan_train = user_spec_fin_3[user_spec_fin_3['existing_loan_amt'].notna()][use_cols_4]
  usf_loan_train['existing_loan_amt']= usf_loan_train['existing_loan_amt'].astype('int')

  loan_df = usf_loan_train.copy()

  clf = setup(data=loan_df, 
              target='existing_loan_amt',
              categorical_features=use_cate_cols_4,
              numeric_features=use_num_cols_4,   
              normalize=True, 
              normalize_method='zscore',
              iterative_imputation_iters=10,
              polynomial_features=True,
              session_id=42, 
              silent=True,
              ) 
  top5 = compare_models(sort='MSE', n_select=3,  budget_time = 3,errors="raise")
  tuned_top5 = [tune_model(i) for i in top5]
  blender_top5 = blend_models(estimator_list=tuned_top5)

  usf_loan_test = user_spec_fin_3[user_spec_fin_3['existing_loan_amt'].isnull()][use_cols_4]
  usf_loan_test=usf_loan_test.drop(['existing_loan_amt'], axis=1)

  final_model = finalize_model(blender_top5)
  prediction = predict_model(final_model, data=usf_loan_test)
  prediction.rename(columns = {'Label':'existing_loan_amt'},inplace=True)

  usf_loan_test_sv = user_spec_fin_3[user_spec_fin_3['existing_loan_amt'].isnull()][not_use_cols_4]
  usf_loan_test_fin = pd.concat([prediction, usf_loan_test_sv], axis=1)

  # 결측행 + 비결측행 = 원본 데이터
  user_spec_fin_4 = pd.concat([user_spec_fin_3[user_spec_fin_3['existing_loan_amt'].notna()], usf_loan_test_fin]).sample(frac=1).reset_index(drop=True)


  
  from pycaret.classification import *
  #개인회생 변수 범주화
  def personal_cate(data):
    if data['personal_rehabilitation_yn']==0:
      return 0
    elif data['personal_rehabilitation_yn']==1:
      if data['personal_rehabilitation_complete_yn']==0:
        return 1
      else:
        return 2
    else:
      return np.NaN
  user_spec_fin_4['personal_rehabilitation']=user_spec_fin_4.apply(personal_cate,axis=1)

  # 현재 칼럼의 예측에 활용할 변수 선택
  not_use_cols_5 = ['application_id', 'user_id', 'personal_rehabilitation_yn',
                    'personal_rehabilitation_complete_yn']
  use_cols_5 = ['yearly_income', 'income_type', 'employment_type', 'houseown_type', 
                'desired_amount', 'purpose', 'gender', 'age', 'credit_score', 'working_years', 'existing_loan_amt', 'personal_rehabilitation']
  use_cate_cols_5 = ['income_type', 'employment_type', 'houseown_type', 'purpose','gender']
  use_num_cols_5 = ['yearly_income','desired_amount','age','credit_score', 'working_years','existing_loan_amt']
  
  # 예측용 데이터 생성
  usf_per_train = user_spec_fin_4[user_spec_fin_4['personal_rehabilitation'].notna()][use_cols_5]
  usf_per_train['personal_rehabilitation']= usf_per_train['personal_rehabilitation'].astype('int')

  per_df = usf_per_train.copy()

  clf = setup(data=per_df, 
              target='personal_rehabilitation',
              categorical_features=use_cate_cols_5,
              numeric_features=use_num_cols_5,
              normalize=True,
              normalize_method='zscore',
              iterative_imputation_iters=10,
              session_id=42, 
              silent=True,
              ) 
  
  top5 = compare_models(sort='Accuracy', n_select=5,  budget_time = 3,errors="raise")
  usf_per_test = user_spec_fin_4[user_spec_fin_4['personal_rehabilitation'].isnull()][use_cols_5]
  usf_per_test=usf_per_test.drop(['personal_rehabilitation'], axis=1)

  final_model = finalize_model(top5)
  prediction = predict_model(final_model, data=usf_per_test)
  prediction.rename(columns = {'Label':'personal_rehabilitation'},inplace=True)

  usf_per_test_sv = user_spec_fin_4[user_spec_fin_4['personal_rehabilitation'].isnull()][not_use_cols_5]
  usf_per_test_fin = pd.concat([prediction, usf_per_test_sv], axis=1)

  # 결측행 + 비결측행 = 원본 데이터
  user_spec_fin_5 = pd.concat([user_spec_fin_4[user_spec_fin_4['personal_rehabilitation'].notna()], usf_per_test_fin]).sample(frac=1).reset_index(drop=True)

  user_spec_impute=user_spec_fin_5.drop(['personal_rehabilitation_yn','personal_rehabilitation_complete_yn', 'Score'],axis=1)
  user_spec_impute.to_csv('data_impute_fin.csv')

