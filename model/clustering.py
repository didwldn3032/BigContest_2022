# -*- coding: utf-8 -*-
"""clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_WZFa4bn2h2nEsFz9QYvtYv5IEJJrgfu
"""

# Commented out IPython magic to ensure Python compatibility.
# 전처리 라이브러리
import pandas as pd
import numpy as np
import os
import datetime as dt
np.random.seed(777)

# 시각화 라이브러리
import matplotlib
import matplotlib.pyplot as plt
import seaborn as sns

# 내부에 결과를 출력하도록 설정
# %matplotlib inline

# 마이너스 기호 출력
plt.rc('axes', unicode_minus=False)

# 분석에 문제가 없는 경고 메시지 숨김
import warnings
warnings.filterwarnings('ignore')

# Kmeans 클러스팅
from sklearn.cluster import KMeans

# 스케일링
from sklearn.preprocessing import RobustScaler

np.random.seed(777)

def countp(df):
    plt.figure(figsize=(16,8), facecolor='white')
    for i in range(0, len(df.columns)-1):
        ax = plt.subplot(2,3,i+1)
        sns.countplot(df.iloc[:,i], palette=sns.cubehelix_palette(start=2.8, rot=.1))
        plt.title(df.columns[i], fontsize=10)
        plt.ylabel('count',fontsize=15)
        plt.xlabel(' ')
        plt.xticks(fontsize=14)
        plt.yticks(fontsize=12)
        plt.tight_layout(4)
    plt.show()

if __name__ == "__main__":
  log = pd.read_csv('/content/drive/MyDrive/Hype Money/raw/log_data.csv', parse_dates=['timestamp']) # 유저로그데이터

  # 3월~6월 로그로 clustering 진행
  log['count'] = 1
  events = pd.pivot_table(log, index=['user_id','date_cd'], columns='event', values='count', aggfunc='count')
  events = events.fillna(0)
  events = events.drop(columns=['SignUp','UsePrepayCalc','UseDSRCalc','Login','SignUp','CompleteIDCertification'], axis=1)
  events = events.loc[(events!=0).any(axis=1)]

  # 스케일링
  from sklearn.preprocessing import RobustScaler
  scaler = RobustScaler()
  events_scale = scaler.fit_transform(events)

  # 정규화된 데이터에 학습
  k = 4
  model = KMeans(n_clusters = k, random_state = 777)
  model.fit(events_scale)
  events['cluster'] = model.fit_predict(events_scale) + 1 # 클러스터링 결과 각 데이터가 몇 번째 그룹에 속하는지 저장
  events['cluster'].value_counts()

  events = events[['OpenApp','GetCreditInfo','UseLoanManage','ViewLoanApplyIntro','StartLoanApply','EndLoanApply','cluster']]

  for i in range(1,5):
    globals()["c{}".format(i)] = events[events['cluster']==i].astype('int64')

  countp(c1)
  countp(c2[(c2['GetCreditInfo']<=10)&(c2['OpenApp']<=10)&(c2['StartLoanApply']<=10)&(c2['UseLoanManage']<=10)&(c2['ViewLoanApplyIntro']<=10)])
  countp(c3[(c3['GetCreditInfo']<=10)&(c3['OpenApp']<=10)&(c3['StartLoanApply']<=10)&(c3['UseLoanManage']<=10)&(c3['ViewLoanApplyIntro']<=10)])
  countp(c4[(c4['GetCreditInfo']<=15)&(c4['OpenApp']<=15)&(c4['StartLoanApply']<=15)&(c4['UseLoanManage']<=15)&(c4['ViewLoanApplyIntro']<=15)&(c4['EndLoanApply']<=15)])

